package case_study_hospital_management.view;

import case_study_hospital_management.common.constants.ConfigurationConstants;
import case_study_hospital_management.common.constants.WorkingHoursConstants;
import case_study_hospital_management.common.enums.AppointmentStatus;
import case_study_hospital_management.common.enums.DoctorSpecialization;
import case_study_hospital_management.entity.AppointmentEntity;
import case_study_hospital_management.entity.DoctorEntity;
import case_study_hospital_management.entity.PatientEntity;
import case_study_hospital_management.util.ConsoleUtil;
import case_study_hospital_management.util.DateUtil;
import case_study_hospital_management.util.InputValidatorUtil;
import ss12_java_collection_framework.bai_tap.student_management.util.ConsoleColorUtil;

import java.time.LocalDate;
import java.util.*;

public class AppointmentView {
    private static final Scanner sc = new Scanner(System.in);
    private static AppointmentView instance;
    private AppointmentView() {
    }

    public static synchronized AppointmentView getInstance() {
        if (instance == null) {
            instance = new AppointmentView();
        }
        return instance;
    }

    public void displayMenu() {
        System.out.println();
        System.out.println("=".repeat(ConfigurationConstants.SEPARATION_LENGTH));
        ConsoleUtil.printlnBold("\uD83D\uDC65 QU·∫¢N L√ù L·ªäCH H·∫∏N");
        ConsoleUtil.printlnBold("‚ûï 1. ƒê·∫∂T L·ªäCH H·∫∏N M·ªöI");
        ConsoleUtil.printlnItalic("\t\uD83D\uDCDD Nh·∫≠p th√¥ng tin l·ªãch h·∫πn m·ªõi v√†o h·ªá th·ªëng");
        ConsoleUtil.printlnBold("\uD83D\uDD0D 2. T√åM KI·∫æM L·ªäCH H·∫∏N");
        ConsoleUtil.printlnItalic("\t\uD83C\uDD94 T√¨m theo m√£ l·ªãch h·∫πn");
        ConsoleUtil.printlnItalic("\t\uD83D\uDC64 T√¨m theo b·ªánh nh√¢n (m√£, t√™n ho·∫∑c s·ªë ƒëi·ªán tho·∫°i)");
        ConsoleUtil.printlnItalic("\t\uD83D\uDC68\u200D‚öï\uFE0F T√¨m theo b√°c sƒ© (m√£, t√™n ho·∫∑c s·ªë ƒëi·ªán tho·∫°i)");
        ConsoleUtil.printlnItalic("\t\uD83D\uDD39 T√¨m theo tr·∫°ng th√°i");
        ConsoleUtil.printlnItalic("\t\uD83D\uDCC5 T√¨m theo ng√†y");
        ConsoleUtil.printlnBold("\uD83D\uDCCB 3. DANH S√ÅCH L·ªäCH H·∫∏N");
        ConsoleUtil.printlnItalic("\t\uD83D\uDCCA Hi·ªÉn th·ªã to√†n b·ªô danh s√°ch");
        ConsoleUtil.printlnBold("‚úè\uFE0F 4. C·∫¨P NH·∫¨T L·ªäCH H·∫∏N");
        ConsoleUtil.printlnItalic("\t\uD83D\uDD04 C·∫≠p nh·∫≠t th√¥ng tin l·ªãch h·∫πn");
        ConsoleUtil.printlnItalic("\t\uD83D\uDD39 C·∫≠p nh·∫≠t tr·∫°ng th√°i");
        ConsoleUtil.printlnBold("\uD83D\uDDD1\uFE0F 5. X√ìA L·ªäCH H·∫∏N");
        ConsoleUtil.printlnItalic("\t‚ö†\uFE0F X√≥a l·ªãch h·∫πn kh·ªèi h·ªá th·ªëng (c·∫©n th·∫≠n!)");
        ConsoleUtil.printlnBold("\uD83D\uDCC5 6. XEM L·ªäCH H·∫∏N H√îM NAY");
        ConsoleUtil.printlnBold("\uD83D\uDCCA 7. B√ÅO C√ÅO & TH·ªêNG K√ä");
        ConsoleUtil.printlnBold("\uD83D\uDD19 0. QUAY L·∫†I MENU CH√çNH");
        System.out.println("=".repeat(ConfigurationConstants.SEPARATION_LENGTH));
    }

    public void display(List<AppointmentEntity> appointments, String title) {
        System.out.println();
        System.out.println("=".repeat(title.length() / 2) + title + "=".repeat(title.length() / 2));
        displayAtTable(appointments);
    }

    public void display(List<AppointmentEntity> appointments) {
        display(appointments, "DANH S√ÅCH L·ªäCH H·∫∏N");
    }

    public void displayAtTable(List<AppointmentEntity> appointments) {
        String ordinalNumberLabel = "STT";
        String idLabel = "M√£ l·ªãch h·∫πn";
        String patientLabel = "B·ªánh nh√¢n";
        String doctorLabel = "B√°c sƒ©";
        String appointmentDateLabel = "Ng√†y";
        String appointmentTimeLabel = "Gi·ªù";
        String reasonLabel = "L√Ω do";
        String statusLabel = "Tr·∫°ng th√°i";
        String newIdLabel = "M√£ l·ªãch h·∫πn m·ªõi";
        int maxOrdinalNumberLength = 5;
        int maxIdLength = idLabel.length();
        int maxPatientLength = patientLabel.length();
        int maxDoctorLength = doctorLabel.length();
        int maxAppointmentDateLength = appointmentDateLabel.length();
        int maxAppointmentTimeLength = appointmentTimeLabel.length();
        int maxReasonLength = reasonLabel.length();
        int maxStatusLength = newIdLabel.length();
        int maxNewIdLength = newIdLabel.length();
        for (AppointmentEntity appointment : appointments) {
            maxIdLength = Math.max(maxIdLength, appointment.getId().length());
            maxPatientLength = Math.max(maxPatientLength, (String.format("%s (%s)", appointment.getPatient().getFullName(), appointment.getPatient().getId())).length());
            maxDoctorLength = Math.max(maxDoctorLength, (String.format("%s (%s)", appointment.getDoctor().getFullName(), appointment.getDoctor().getId())).length());
            maxAppointmentDateLength = Math.max(maxAppointmentDateLength, DateUtil.formatDate(appointment.getAppointmentDate()).length());
            maxAppointmentTimeLength = Math.max(maxAppointmentTimeLength, appointment.getAppointmentTime().length());
            maxReasonLength = Math.max(maxReasonLength, appointment.getReason().length());
            maxStatusLength = Math.max(maxStatusLength, appointment.getStatus().getDisplayName().length());
            maxNewIdLength = Math.max(maxNewIdLength, appointment.getNewAppointmentId().length());
        }

        // T·∫°o ƒë·ªãnh d·∫°ng cho d√≤ng
        String lineFormat = "+-" + "-".repeat(maxOrdinalNumberLength) + "-+-" +
                "-".repeat(maxIdLength) + "-+-" +
                "-".repeat(maxPatientLength) + "-+-" +
                "-".repeat(maxDoctorLength) + "-+-" +
                "-".repeat(maxAppointmentDateLength) + "-+-" +
                "-".repeat(maxAppointmentTimeLength) + "-+-" +
                "-".repeat(maxReasonLength) + "-+-" +
                "-".repeat(maxStatusLength) + "-+-" +
                "-".repeat(maxNewIdLength) + "-+%n";

        // T·∫°o ƒë·ªãnh d·∫°ng cho d·ªØ li·ªáu
        String dataFormat = "| %-" +
                maxOrdinalNumberLength + "s | %-" +
                maxIdLength + "s | %-" +
                maxPatientLength + "s | %-" +
                maxDoctorLength + "s | %-" +
                maxAppointmentDateLength + "s | %-" +
                maxAppointmentTimeLength + "s | %-" +
                maxReasonLength + "s | %-" +
                maxStatusLength + "s | %-" +
                maxNewIdLength + "s |%n";

        // In b·∫£ng
        System.out.printf(lineFormat);
        System.out.printf(dataFormat, ordinalNumberLabel, idLabel, patientLabel, doctorLabel, appointmentDateLabel, appointmentTimeLabel, reasonLabel, statusLabel, newIdLabel);
        System.out.printf(lineFormat);
        int i = 1;
        for (AppointmentEntity appointment : appointments) {
            System.out.printf(dataFormat,
                    i,
                    appointment.getId(),
                    String.format("%s (%s)", appointment.getPatient().getFullName(), appointment.getPatient().getId()),
                    String.format("%s (%s)", appointment.getDoctor().getFullName(), appointment.getDoctor().getId()),
                    DateUtil.formatDate(appointment.getAppointmentDate()),
                    appointment.getAppointmentTime(),
                    appointment.getReason(),
                    appointment.getStatus().getDisplayName(),
                    appointment.getNewAppointmentId());
            i++;
        }
        System.out.printf(lineFormat);
    }

    public void showDetail(AppointmentEntity appointment) {
        System.out.println("=".repeat(ConfigurationConstants.SEPARATION_LENGTH));
        ConsoleUtil.printlnBold("\uD83D\uDCC4 CHI TI·∫æT L·ªäCH H·∫∏N");
        System.out.print("\uD83C\uDD94 M√£ l·ªãch h·∫πn: ");
        ConsoleUtil.printlnItalic(appointment.getId());
        System.out.print("\uD83D\uDC64 B·ªánh nh√¢n: ");
        ConsoleUtil.printlnItalic(String.format("%s (%s) | üìû: %s ", appointment.getPatient().getFullName(), appointment.getPatient().getId(), appointment.getPatient().getPhoneNumber()));
        System.out.print("\uD83D\uDC68\u200D‚öï\uFE0F B√°c sƒ©: ");
        ConsoleUtil.printlnItalic(String.format("%s (%s) | üìû: %s", appointment.getDoctor().getFullName(), appointment.getDoctor().getId(), appointment.getDoctor().getPhoneNumber()));
        System.out.print("\uD83C\uDFE5 Chuy√™n khoa: ");
        ConsoleUtil.printlnItalic(appointment.getDoctor().getSpecialization().getDisplayName());
        System.out.print("\uD83D\uDCC5 Ng√†y: ");
        ConsoleUtil.printlnItalic(DateUtil.formatDate(appointment.getAppointmentDate()));
        System.out.print("‚è∞ Gi·ªù: ");
        ConsoleUtil.printlnItalic(appointment.getAppointmentTime());
        System.out.print("\uD83D\uDCCB L√Ω do: ");
        ConsoleUtil.printlnItalic(appointment.getReason());
        System.out.print("\uD83D\uDCDD Ghi ch√∫: ");
        ConsoleUtil.printlnItalic(appointment.getNotes());
        System.out.print("\uD83D\uDD39 Tr·∫°ng th√°i: ");
        ConsoleUtil.printlnItalic(appointment.getStatus().getDisplayName());
        System.out.println("=".repeat(ConfigurationConstants.SEPARATION_LENGTH));
    }

    public void displayDetailMenu() {
        System.out.println("‚úè\uFE0F 1. C·∫≠p nh·∫≠t th√¥ng tin");
        System.out.println("\uD83D\uDD39 2. C·∫≠p nh·∫≠t tr·∫°ng th√°i");
        System.out.println("\uD83D\uDCC5 3. D·ªùi l·ªãch h·∫πn");
        System.out.println("\uD83D\uDDD1\uFE0F 4. Xo√° l·ªãch h·∫πn");
        System.out.println("\uD83D\uDD19 0. Tr·ªü v·ªÅ");
    }

    public AppointmentEntity inputAppointment(PatientEntity patient, DoctorEntity doctor, LocalDate appointmentDate, Map<String, Boolean> emptySchedules) {
        return inputAppointment(patient, doctor, appointmentDate, emptySchedules, null, false);
    }

    public AppointmentEntity inputAppointment(PatientEntity patient, DoctorEntity doctor, LocalDate appointmentDate, Map<String, Boolean> emptySchedules, AppointmentEntity appointment, boolean isUpdate) {
        if (isUpdate) {
            ConsoleColorUtil.printlnYellow("ƒê·ªÉ tr·ªëng n·∫øu kh√¥ng mu·ªën c·∫≠p nh·∫≠t th√¥ng tin n√†o ƒë√≥...");
        }
        String appointmentTime = selectAppointmentTime(emptySchedules);
        String reason = InputValidatorUtil.inputString("\uD83D\uDCCB L√Ω do kh√°m: ", "l√Ω do kh√°m", 3, 255, isUpdate);
        String notes = InputValidatorUtil.inputString("\uD83D\uDCDD Ghi ch√∫: ", "ghi ch√∫", 3, 255, true);
        return new AppointmentEntity(patient.getId(), doctor.getId(), appointmentDate, appointmentTime, AppointmentStatus.SCHEDULED, reason, notes, null, null, "");
    }

    public String selectAppointmentTime(Map<String, Boolean> emptySchedules) {
        int index = 1;
        String scheduleStatus;
        int breakLineIndex = 4;
        int schedulesLength = emptySchedules.size();
        Map<Integer, String> indexesCanChoose = new HashMap<>();
        for (Map.Entry<String, Boolean> schedule : emptySchedules.entrySet()) {
            if (schedule.getValue()) {
                scheduleStatus = ConsoleUtil.formatGreen("ƒêang tr·ªëng");
                indexesCanChoose.put(index, schedule.getKey());
            } else {
                scheduleStatus = ConsoleUtil.formatYellow("ƒê√£ ƒë·∫∑t");
            }
            System.out.printf("%-46s", String.format("[%d] %s - %s", index, schedule.getKey(), scheduleStatus));
            if (index % breakLineIndex == 0 && index != schedulesLength) {
                System.out.println();
            }
            index++;
        }
        System.out.println();
        int choice;
        while (true) {
            try {
                System.out.print("‚è∞ Th·ªùi gian: ");
                choice = Integer.parseInt(sc.nextLine());
                if (!indexesCanChoose.containsKey(choice)) {
                    ConsoleColorUtil.printlnRed("B·∫°n nh·∫≠p 1 s·ªë v∆∞·ª£t ngo√†i l·ª±a ch·ªçn ho·∫∑c th·ªùi gian ƒë√≥ ƒë√£ c√≥ ng∆∞·ªùi ƒë·∫∑t. Vui l√≤ng nh·∫≠p l·∫°i");
                } else {
                    return indexesCanChoose.get(choice);
                }
            } catch (NumberFormatException e) {
                ConsoleColorUtil.printlnRed("Vui l√≤ng nh·∫≠p l·ª±a ch·ªçn l√† 1 s·ªë nguy√™n t∆∞∆°ng ·ª©ng c√°c l·ªãch tr√™n.");
            }
        }
    }

    public LocalDate selectAppointmentDate() {
        return InputValidatorUtil.inputFutureDate("\uD83D\uDCC5 Ng√†y h·∫πn kh√°m (dd/MM/yyyy): ", "ng√†y h·∫πn kh√°m", false);
    }

    public boolean selectThisPerson(String displayName) {
        int choice;
        while (true) {
            try {
                System.out.println("Ch·ªçn " + displayName + " n√†y: ");
                System.out.println("\t1. X√°c nh·∫≠n");
                System.out.println("\t2. Tr·ªü v·ªÅ");
                System.out.print("L·ª±a ch·ªçn c·ªßa b·∫°n: ");
                choice = Integer.parseInt(sc.nextLine());
                if (choice == 1) return true;
                else if (choice == 2) return false;
                else ConsoleColorUtil.printlnRed("B·∫°n ch·ªçn ch·ª©c nƒÉng kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn l·∫°i.");
            } catch (NumberFormatException e) {
                ConsoleColorUtil.printlnRed("B·∫°n ch·ªçn ch·ª©c nƒÉng kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn l·∫°i.");
            }
        }
    }

    public boolean reSelectDoctorOrDate(DoctorEntity doctor, LocalDate appointmentDate) {
        int choice;
        while (true) {
            try {
                System.out.println("Hi·ªán kh√¥ng c√≥ l·ªãch tr·ªëng ƒë·ªëi v·ªõi b√°c sƒ© " + doctor.getFullName() + " trong ng√†y " + DateUtil.formatDate(appointmentDate));
                System.out.println("Vui l√≤ng ch·ªçn b√°c sƒ© kh√°c ho·∫∑c ng√†y kh√°c. L·ª±a ch·ªçn c·ªßa b·∫°n l√†: ");
                System.out.println("\t1. Ch·ªçn b√°c sƒ© kh√°c");
                System.out.println("\t2. Ch·ªçn ng√†y kh√°c");
                System.out.print("L·ª±a ch·ªçn c·ªßa b·∫°n: ");
                choice = Integer.parseInt(sc.nextLine());
                if (choice == 1) return true;
                else if (choice == 2) return false;
                else ConsoleColorUtil.printlnRed("B·∫°n ch·ªçn ch·ª©c nƒÉng kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn l·∫°i.");
            } catch (NumberFormatException e) {
                ConsoleColorUtil.printlnRed("B·∫°n ch·ªçn ch·ª©c nƒÉng kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn l·∫°i.");
            }
        }
    }
}
